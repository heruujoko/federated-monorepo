schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Customer
  @join__type(graph: CUSTOMERS)
{
  id: ID!
  name: String!
  email: String!
  created_at: Timestamp!
  updated_at: Timestamp
  deleted_at: Timestamp
}

type Feature
  @join__type(graph: FEATURES, key: "name")
{
  name: String!
  description: String @inaccessible
  enabled: Boolean!
}

type Foo
  @join__type(graph: CUSTOMERS, key: "id")
{
  id: ID!
  name: String
}

scalar join__FieldSet

enum join__Graph {
  CUSTOMERS @join__graph(name: "customers", url: "http://localhost:7002/graphql")
  FEATURES @join__graph(name: "features", url: "http://localhost:7001/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: CUSTOMERS)
  @join__type(graph: FEATURES)
{
  foo(id: ID!): Foo @join__field(graph: CUSTOMERS)
  customers: [Customer] @join__field(graph: CUSTOMERS)
  features: [Feature] @join__field(graph: FEATURES)
}

scalar Timestamp
  @join__type(graph: CUSTOMERS)
